[
  {
    "objectID": "HW9.html",
    "href": "HW9.html",
    "title": "Intro to Modeling (Continued fot HW9)",
    "section": "",
    "text": "library(readr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(stringr)\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(ggcorrplot)\n\nWarning: package 'ggcorrplot' was built under R version 4.4.2\n\nlibrary(tidymodels)\n\nWarning: package 'tidymodels' was built under R version 4.4.2\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n\n\n✔ broom        1.0.6     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tibble       3.2.1\n✔ infer        1.0.7     ✔ tune         1.2.1\n✔ modeldata    1.4.0     ✔ workflows    1.1.4\n✔ parsnip      1.2.1     ✔ workflowsets 1.1.0\n✔ purrr        1.0.2     ✔ yardstick    1.3.1\n✔ recipes      1.1.0     \n\n\nWarning: package 'dials' was built under R version 4.4.2\n\n\nWarning: package 'infer' was built under R version 4.4.2\n\n\nWarning: package 'modeldata' was built under R version 4.4.2\n\n\nWarning: package 'parsnip' was built under R version 4.4.2\n\n\nWarning: package 'recipes' was built under R version 4.4.2\n\n\nWarning: package 'rsample' was built under R version 4.4.2\n\n\nWarning: package 'tune' was built under R version 4.4.2\n\n\nWarning: package 'workflows' was built under R version 4.4.2\n\n\nWarning: package 'workflowsets' was built under R version 4.4.2\n\n\nWarning: package 'yardstick' was built under R version 4.4.2\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard()  masks scales::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Dig deeper into tidy modeling with R at https://www.tmwr.org\n\nlibrary(rpart.plot)\n\nWarning: package 'rpart.plot' was built under R version 4.4.2\n\n\nLoading required package: rpart\n\n\n\nAttaching package: 'rpart'\n\n\nThe following object is masked from 'package:dials':\n\n    prune\n\nlibrary(vip)\n\nWarning: package 'vip' was built under R version 4.4.2\n\n\n\nAttaching package: 'vip'\n\n\nThe following object is masked from 'package:utils':\n\n    vi\n\nbike_raw &lt;-  read_csv(\n  \"./Data/SeoulBikeData.csv\",\n  col_names = TRUE,\n  locale = locale(encoding = 'latin1')\n)\n\nRows: 8760 Columns: 14\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Date, Seasons, Holiday, Functioning Day\ndbl (10): Rented Bike Count, Hour, Temperature(°C), Humidity(%), Wind speed ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "HW9.html#eda",
    "href": "HW9.html#eda",
    "title": "Intro to Modeling (Continued fot HW9)",
    "section": "EDA",
    "text": "EDA\n\nbike_raw |&gt; \n  summarise(across(everything(), ~sum(is.na(.))))\n\n# A tibble: 1 × 14\n   Date `Rented Bike Count`  Hour `Temperature(°C)` `Humidity(%)`\n  &lt;int&gt;               &lt;int&gt; &lt;int&gt;             &lt;int&gt;         &lt;int&gt;\n1     0                   0     0                 0             0\n# ℹ 9 more variables: `Wind speed (m/s)` &lt;int&gt;, `Visibility (10m)` &lt;int&gt;,\n#   `Dew point temperature(°C)` &lt;int&gt;, `Solar Radiation (MJ/m2)` &lt;int&gt;,\n#   `Rainfall(mm)` &lt;int&gt;, `Snowfall (cm)` &lt;int&gt;, Seasons &lt;int&gt;, Holiday &lt;int&gt;,\n#   `Functioning Day` &lt;int&gt;\n\n\nWe observe no missing values.\n\nstr(bike_raw)\n\nspc_tbl_ [8,760 × 14] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Date                     : chr [1:8760] \"01/12/2017\" \"01/12/2017\" \"01/12/2017\" \"01/12/2017\" ...\n $ Rented Bike Count        : num [1:8760] 254 204 173 107 78 100 181 460 930 490 ...\n $ Hour                     : num [1:8760] 0 1 2 3 4 5 6 7 8 9 ...\n $ Temperature(°C)          : num [1:8760] -5.2 -5.5 -6 -6.2 -6 -6.4 -6.6 -7.4 -7.6 -6.5 ...\n $ Humidity(%)              : num [1:8760] 37 38 39 40 36 37 35 38 37 27 ...\n $ Wind speed (m/s)         : num [1:8760] 2.2 0.8 1 0.9 2.3 1.5 1.3 0.9 1.1 0.5 ...\n $ Visibility (10m)         : num [1:8760] 2000 2000 2000 2000 2000 ...\n $ Dew point temperature(°C): num [1:8760] -17.6 -17.6 -17.7 -17.6 -18.6 -18.7 -19.5 -19.3 -19.8 -22.4 ...\n $ Solar Radiation (MJ/m2)  : num [1:8760] 0 0 0 0 0 0 0 0 0.01 0.23 ...\n $ Rainfall(mm)             : num [1:8760] 0 0 0 0 0 0 0 0 0 0 ...\n $ Snowfall (cm)            : num [1:8760] 0 0 0 0 0 0 0 0 0 0 ...\n $ Seasons                  : chr [1:8760] \"Winter\" \"Winter\" \"Winter\" \"Winter\" ...\n $ Holiday                  : chr [1:8760] \"No Holiday\" \"No Holiday\" \"No Holiday\" \"No Holiday\" ...\n $ Functioning Day          : chr [1:8760] \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Date = col_character(),\n  ..   `Rented Bike Count` = col_double(),\n  ..   Hour = col_double(),\n  ..   `Temperature(°C)` = col_double(),\n  ..   `Humidity(%)` = col_double(),\n  ..   `Wind speed (m/s)` = col_double(),\n  ..   `Visibility (10m)` = col_double(),\n  ..   `Dew point temperature(°C)` = col_double(),\n  ..   `Solar Radiation (MJ/m2)` = col_double(),\n  ..   `Rainfall(mm)` = col_double(),\n  ..   `Snowfall (cm)` = col_double(),\n  ..   Seasons = col_character(),\n  ..   Holiday = col_character(),\n  ..   `Functioning Day` = col_character()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nWe see the types generally make sense, so we’ll only convert the date column (and create factors from the string variables) but rename all with a short function.\n\nformat_column_name &lt;- function(name) {\n  name |&gt; \n    str_remove_all(\"[^[:alnum:] ]\")  |&gt;\n    str_squish() |&gt; \n    str_to_lower() |&gt; \n    str_replace_all(\" \", \"_\") |&gt; \n    str_replace_all(\"temperaturec\", \"temperature_c\")\n}\n\nbike_tbl &lt;-  bike_raw |&gt; \n  rename_with(format_column_name) |&gt; \n  mutate(date = dmy(date)) |&gt; \n  mutate(across(where(is.character), as.factor))\n\nbike_tbl |&gt;\n  summarize(across(where(is.numeric), list(\"mean\" = mean, \"sd\" = sd), .names = \"{.fn}_{.col}\"))\n\n# A tibble: 1 × 20\n  mean_rented_bike_count sd_rented_bike_count mean_hour sd_hour\n                   &lt;dbl&gt;                &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1                   705.                 645.      11.5    6.92\n# ℹ 16 more variables: mean_temperature_c &lt;dbl&gt;, sd_temperature_c &lt;dbl&gt;,\n#   mean_humidity &lt;dbl&gt;, sd_humidity &lt;dbl&gt;, mean_wind_speed_ms &lt;dbl&gt;,\n#   sd_wind_speed_ms &lt;dbl&gt;, mean_visibility_10m &lt;dbl&gt;, sd_visibility_10m &lt;dbl&gt;,\n#   mean_dew_point_temperature_c &lt;dbl&gt;, sd_dew_point_temperature_c &lt;dbl&gt;,\n#   mean_solar_radiation_mjm2 &lt;dbl&gt;, sd_solar_radiation_mjm2 &lt;dbl&gt;,\n#   mean_rainfallmm &lt;dbl&gt;, sd_rainfallmm &lt;dbl&gt;, mean_snowfall_cm &lt;dbl&gt;,\n#   sd_snowfall_cm &lt;dbl&gt;\n\nbike_tbl |&gt;\n  group_by(seasons, holiday, functioning_day) |&gt; \n  summarize(across(where(is.numeric), list(\"mean\" = mean, \"sd\" = sd), .names = \"{.fn}_{.col}\"))\n\n`summarise()` has grouped output by 'seasons', 'holiday'. You can override\nusing the `.groups` argument.\n\n\n# A tibble: 11 × 23\n# Groups:   seasons, holiday [8]\n   seasons holiday   functioning_day mean_rented_bike_count sd_rented_bike_count\n   &lt;fct&gt;   &lt;fct&gt;     &lt;fct&gt;                            &lt;dbl&gt;                &lt;dbl&gt;\n 1 Autumn  Holiday   No                                  0                    0 \n 2 Autumn  Holiday   Yes                               948.                 603.\n 3 Autumn  No Holid… No                                  0                    0 \n 4 Autumn  No Holid… Yes                               923.                 618.\n 5 Spring  Holiday   Yes                               635.                 609.\n 6 Spring  No Holid… No                                  0                    0 \n 7 Spring  No Holid… Yes                               750.                 619.\n 8 Summer  Holiday   Yes                              1022.                 564.\n 9 Summer  No Holid… Yes                              1034.                 693.\n10 Winter  Holiday   Yes                               157.                 108.\n11 Winter  No Holid… Yes                               232.                 152.\n# ℹ 18 more variables: mean_hour &lt;dbl&gt;, sd_hour &lt;dbl&gt;,\n#   mean_temperature_c &lt;dbl&gt;, sd_temperature_c &lt;dbl&gt;, mean_humidity &lt;dbl&gt;,\n#   sd_humidity &lt;dbl&gt;, mean_wind_speed_ms &lt;dbl&gt;, sd_wind_speed_ms &lt;dbl&gt;,\n#   mean_visibility_10m &lt;dbl&gt;, sd_visibility_10m &lt;dbl&gt;,\n#   mean_dew_point_temperature_c &lt;dbl&gt;, sd_dew_point_temperature_c &lt;dbl&gt;,\n#   mean_solar_radiation_mjm2 &lt;dbl&gt;, sd_solar_radiation_mjm2 &lt;dbl&gt;,\n#   mean_rainfallmm &lt;dbl&gt;, sd_rainfallmm &lt;dbl&gt;, mean_snowfall_cm &lt;dbl&gt;, …\n\ntable(bike_tbl$seasons)\n\n\nAutumn Spring Summer Winter \n  2184   2208   2208   2160 \n\ntable(bike_tbl$holiday)\n\n\n   Holiday No Holiday \n       432       8328 \n\ntable(bike_tbl$functioning_day)\n\n\n  No  Yes \n 295 8465 \n\n\nWe can get a sense of trends by group, in particular that non-functioning days will have 0 rentals.\n\nbike_tbl &lt;- bike_tbl |&gt; \n  filter(functioning_day == \"Yes\") |&gt; \n  select(-functioning_day)\n\nNow we want to only have one observation per day and use the daily average or sum of certain statistics.\n\nbike_tbl &lt;- bike_tbl |&gt; \n  group_by(date, seasons, holiday) |&gt; \n  mutate(across(c(rented_bike_count, rainfallmm, snowfall_cm), list(\"sum\" = sum), .names = \"{.col}\")) |&gt; \n  mutate(across(c(temperature_c, humidity, wind_speed_ms, visibility_10m, dew_point_temperature_c, solar_radiation_mjm2), list(\"mean\" = mean), .names = \"{.col}\")) |&gt; \n  filter(row_number()==1) |&gt; \n  select(-hour)\n\nNow we summarize again, with a few plots for good measure.\n\nbike_tbl |&gt;\n  ungroup() |&gt; \n  summarize(across(where(is.numeric), list(\"mean\" = mean, \"sd\" = sd), .names = \"{.fn}_{.col}\"))\n\n# A tibble: 1 × 18\n  mean_rented_bike_count sd_rented_bike_count mean_temperature_c\n                   &lt;dbl&gt;                &lt;dbl&gt;              &lt;dbl&gt;\n1                 17485.                9937.               12.8\n# ℹ 15 more variables: sd_temperature_c &lt;dbl&gt;, mean_humidity &lt;dbl&gt;,\n#   sd_humidity &lt;dbl&gt;, mean_wind_speed_ms &lt;dbl&gt;, sd_wind_speed_ms &lt;dbl&gt;,\n#   mean_visibility_10m &lt;dbl&gt;, sd_visibility_10m &lt;dbl&gt;,\n#   mean_dew_point_temperature_c &lt;dbl&gt;, sd_dew_point_temperature_c &lt;dbl&gt;,\n#   mean_solar_radiation_mjm2 &lt;dbl&gt;, sd_solar_radiation_mjm2 &lt;dbl&gt;,\n#   mean_rainfallmm &lt;dbl&gt;, sd_rainfallmm &lt;dbl&gt;, mean_snowfall_cm &lt;dbl&gt;,\n#   sd_snowfall_cm &lt;dbl&gt;\n\nbike_tbl |&gt;\n  group_by(seasons, holiday) |&gt; \n  summarize(across(where(is.numeric), list(\"mean\" = mean, \"sd\" = sd), .names = \"{.fn}_{.col}\"))\n\n`summarise()` has grouped output by 'seasons'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 8 × 20\n# Groups:   seasons [4]\n  seasons holiday mean_rented_bike_count sd_rented_bike_count mean_temperature_c\n  &lt;fct&gt;   &lt;fct&gt;                    &lt;dbl&gt;                &lt;dbl&gt;              &lt;dbl&gt;\n1 Autumn  Holiday                 22754.                5642.             18.0  \n2 Autumn  No Hol…                 22065.                6792.             13.6  \n3 Spring  Holiday                 15247.               10917.             13.0  \n4 Spring  No Hol…                 18002.                8322.             13.0  \n5 Summer  Holiday                 24532.                8438.             27.3  \n6 Summer  No Hol…                 24824.                7324.             26.6  \n7 Winter  Holiday                  3759                 1561.             -0.188\n8 Winter  No Hol…                  5574.                1757.             -2.77 \n# ℹ 15 more variables: sd_temperature_c &lt;dbl&gt;, mean_humidity &lt;dbl&gt;,\n#   sd_humidity &lt;dbl&gt;, mean_wind_speed_ms &lt;dbl&gt;, sd_wind_speed_ms &lt;dbl&gt;,\n#   mean_visibility_10m &lt;dbl&gt;, sd_visibility_10m &lt;dbl&gt;,\n#   mean_dew_point_temperature_c &lt;dbl&gt;, sd_dew_point_temperature_c &lt;dbl&gt;,\n#   mean_solar_radiation_mjm2 &lt;dbl&gt;, sd_solar_radiation_mjm2 &lt;dbl&gt;,\n#   mean_rainfallmm &lt;dbl&gt;, sd_rainfallmm &lt;dbl&gt;, mean_snowfall_cm &lt;dbl&gt;,\n#   sd_snowfall_cm &lt;dbl&gt;\n\nbike_tbl |&gt; \n  ungroup() |&gt; \n  select(where(is.numeric)) |&gt; \n  cor() |&gt;\n  ggcorrplot(hc.order = TRUE, type = \"lower\", lab = TRUE)\n\n\n\n\n\n\n\nbike_tbl |&gt; \n  ggplot(aes(x = rented_bike_count)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nbike_tbl |&gt; \n  ggplot(aes(x = rented_bike_count, fill = holiday)) +\n  facet_wrap(\"seasons\") +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nbike_tbl |&gt; \n  ggplot() +\n  geom_point(aes(x = temperature_c, y = rented_bike_count))\n\n\n\n\n\n\n\nbike_tbl |&gt; \n  ggplot() +\n  geom_line(aes(x = date, y = rented_bike_count))\n\n\n\n\n\n\n\n\nWe see a few trends:\n\nWeather appears to impact rentals (with more summery weather correlated positively with rentals), but could also be correlated with season.\nWinter almost creates a “secondary mode” in the rental histogram since it has so many low-rental days.\nHolidays don’t seem to increase bike rentals, but also don’t obviously decrease them."
  },
  {
    "objectID": "HW9.html#modeling",
    "href": "HW9.html#modeling",
    "title": "Intro to Modeling (Continued fot HW9)",
    "section": "Modeling",
    "text": "Modeling\nFirst we’ll split up our data as desired.\n\nset.seed(123456)\nbike_split &lt;- initial_split(bike_tbl, strata = seasons)\n\nbike_cv_folds &lt;- vfold_cv(training(bike_split), 10)\n\nNow we build recipes.\n\nrecipe_1 &lt;- recipe(rented_bike_count ~ ., data = training(bike_split)) |&gt; \n  step_mutate(day_type = factor(ifelse(wday(date, label = TRUE) %in% c(\"Sat\", \"Sun\"), \"Weekend\", \"Weekday\"))) |&gt; \n  step_normalize(where(is.numeric)) |&gt; \n  step_dummy(c(\"seasons\", \"holiday\", \"day_type\")) |&gt; \n  step_rm(date)\n\nwf_1 &lt;- workflow() |&gt; \n  add_recipe(recipe_1) |&gt; \n  add_model(linear_reg() |&gt; set_engine(\"lm\"))\n\nwf_1 |&gt; \n  fit_resamples(bike_cv_folds) |&gt; \n  collect_metrics()\n\n# A tibble: 2 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   0.410    10  0.0173 Preprocessor1_Model1\n2 rsq     standard   0.838    10  0.0122 Preprocessor1_Model1\n\nrecipe_2 &lt;- recipe(rented_bike_count ~ ., data = training(bike_split)) |&gt; \n  step_mutate(day_type = factor(ifelse(wday(date, label = TRUE) %in% c(\"Sat\", \"Sun\"), \"Weekend\", \"Weekday\"))) |&gt; \n  step_normalize(where(is.numeric)) |&gt; \n  step_dummy(seasons, holiday, day_type) |&gt; \n  step_interact(terms = ~ starts_with(\"holiday\"):starts_with(\"seasons\")) |&gt; \n  step_interact(terms = ~ starts_with(\"seasons\"):temperature_c) |&gt; \n  step_interact(terms = ~ temperature_c:rainfallmm) |&gt; \n  step_rm(date)\n\nwf_2 &lt;- workflow() |&gt; \n  add_recipe(recipe_2) |&gt; \n  add_model(linear_reg() |&gt; set_engine(\"lm\"))\n\nwf_2 |&gt; \n  fit_resamples(bike_cv_folds) |&gt; \n  collect_metrics()\n\n→ A | warning: prediction from rank-deficient fit; consider predict(., rankdeficient=\"NA\")\n\n\nThere were issues with some computations   A: x1\n\n\nThere were issues with some computations   A: x10\n\n\n\n\n\n# A tibble: 2 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   0.313    10  0.0204 Preprocessor1_Model1\n2 rsq     standard   0.904    10  0.0123 Preprocessor1_Model1\n\nrecipe_3 &lt;- recipe(rented_bike_count ~ ., data = training(bike_split)) |&gt; \n  step_mutate(day_type = factor(ifelse(wday(date, label = TRUE) %in% c(\"Sat\", \"Sun\"), \"Weekend\", \"Weekday\"))) |&gt; \n  step_mutate(across(where(is.numeric), ~ .x^2, .names = \"{.col}_quad\")) |&gt; \n  step_normalize(where(is.numeric) & !ends_with(\"_quad\")) |&gt; \n  step_dummy(seasons, holiday, day_type) |&gt; \n  step_interact(terms = ~ starts_with(\"holiday\"):starts_with(\"seasons\")) |&gt; \n  step_interact(terms = ~ starts_with(\"seasons\"):temperature_c) |&gt; \n  step_interact(terms = ~ temperature_c:rainfallmm) |&gt; \n  step_rm(date)\n\nwf_3 &lt;- workflow() |&gt; \n  add_recipe(recipe_3) |&gt; \n  add_model(linear_reg() |&gt; set_engine(\"lm\"))\n\nwf_3 |&gt; \n  fit_resamples(bike_cv_folds) |&gt; \n  collect_metrics()\n\n→ A | warning: prediction from rank-deficient fit; consider predict(., rankdeficient=\"NA\")\n\n\nThere were issues with some computations   A: x3\n\n\nThere were issues with some computations   A: x10\n\n\n\n\n\n# A tibble: 2 × 6\n  .metric .estimator  mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   0.115    10 0.00772 Preprocessor1_Model1\n2 rsq     standard   0.987    10 0.00164 Preprocessor1_Model1\n\n\nIt looks like our error is minimized in model 3, so we’ll use that for the last part.\n\ntest_run &lt;- wf_3 |&gt; \n  last_fit(bike_split, metrics = metric_set(rmse, mae))\n\n→ A | warning: prediction from rank-deficient fit; consider predict(., rankdeficient=\"NA\")\n\ntest_run |&gt; \n  collect_metrics()\n\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard      0.104  Preprocessor1_Model1\n2 mae     standard      0.0775 Preprocessor1_Model1\n\ntest_run |&gt; \n  extract_fit_parsnip() |&gt; \n  tidy()\n\n# A tibble: 30 × 5\n   term                     estimate std.error statistic   p.value\n   &lt;chr&gt;                       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1 (Intercept)              0.0434    0.194        0.224 0.823    \n 2 temperature_c            0.234     0.189        1.24  0.217    \n 3 humidity                 0.215     0.120        1.80  0.0739   \n 4 wind_speed_ms           -0.0368    0.0337      -1.09  0.277    \n 5 visibility_10m           0.0237    0.0393       0.604 0.546    \n 6 dew_point_temperature_c  0.0214    0.193        0.111 0.912    \n 7 solar_radiation_mjm2     0.171     0.0385       4.45  0.0000135\n 8 rainfallmm              -0.114     0.0262      -4.34  0.0000217\n 9 snowfall_cm              0.00366   0.0205       0.179 0.858    \n10 temperature_c_quad      -0.000802  0.000285    -2.81  0.00534  \n# ℹ 20 more rows\n\n\nIt looks like that model does pretty well here. Our coefficients are interesting too, to see which variables are used heavily in the model."
  },
  {
    "objectID": "HW9.html#lasso",
    "href": "HW9.html#lasso",
    "title": "Intro to Modeling (Continued fot HW9)",
    "section": "LASSO",
    "text": "LASSO\n\nlasso_setup &lt;- linear_reg(penalty = tune(), mixture = 1) |&gt; \n  set_engine(\"glmnet\")\n\nlasso_wf &lt;- workflow() |&gt; \n  add_recipe(recipe_1) |&gt; \n  add_model(lasso_setup) \n\nlasso_best_model &lt;- lasso_wf |&gt; \n  tune_grid(resamples = bike_cv_folds, grid = grid_regular(penalty(), levels = 200)) |&gt;\n  select_best(metric = \"rmse\")\n\nWarning: package 'glmnet' was built under R version 4.4.2\n\n\n→ A | warning: A correlation computation is required, but `estimate` is constant and has 0\n               standard deviation, resulting in a divide by 0 error. `NA` will be returned.\n\n\nThere were issues with some computations   A: x2\n\n\nThere were issues with some computations   A: x10\n\n\n\n\nlasso_wf |&gt; \n  finalize_workflow(lasso_best_model) |&gt;\n  last_fit(bike_split, metrics = metric_set(rmse, mae)) |&gt; \n  collect_metrics()\n\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard       0.375 Preprocessor1_Model1\n2 mae     standard       0.275 Preprocessor1_Model1\n\nlasso_wf |&gt; \n  finalize_workflow(lasso_best_model) |&gt;\n  last_fit(bike_split) |&gt; \n  extract_fit_parsnip() |&gt; \n  tidy()\n\n# A tibble: 14 × 3\n   term                    estimate penalty\n   &lt;chr&gt;                      &lt;dbl&gt;   &lt;dbl&gt;\n 1 (Intercept)               0.140  0.00244\n 2 temperature_c             0      0.00244\n 3 humidity                 -0.121  0.00244\n 4 wind_speed_ms            -0.0697 0.00244\n 5 visibility_10m            0      0.00244\n 6 dew_point_temperature_c   0.413  0.00244\n 7 solar_radiation_mjm2      0.394  0.00244\n 8 rainfallmm               -0.211  0.00244\n 9 snowfall_cm              -0.0275 0.00244\n10 seasons_Spring           -0.482  0.00244\n11 seasons_Summer           -0.272  0.00244\n12 seasons_Winter           -0.806  0.00244\n13 holiday_No.Holiday        0.336  0.00244\n14 day_type_Weekend         -0.213  0.00244"
  },
  {
    "objectID": "HW9.html#regression-tree",
    "href": "HW9.html#regression-tree",
    "title": "Intro to Modeling (Continued fot HW9)",
    "section": "Regression tree",
    "text": "Regression tree\n\ntree_setup &lt;- decision_tree(tree_depth = tune(), min_n = tune(), cost_complexity = tune()) |&gt;\n  set_engine(\"rpart\") |&gt;\n  set_mode(\"regression\")\n\ntree_wf &lt;- workflow() |&gt; \n  add_recipe(recipe_1) |&gt; \n  add_model(tree_setup)\n\ntree_best_model &lt;- tree_wf |&gt; \n  tune_grid(resamples = bike_cv_folds) |&gt; \n  select_best(metric = \"rmse\")\n  \ntree_wf |&gt; \n  finalize_workflow(tree_best_model) |&gt; \n  last_fit(bike_split, metrics = metric_set(rmse, mae)) |&gt; \n  collect_metrics()\n\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard       0.389 Preprocessor1_Model1\n2 mae     standard       0.286 Preprocessor1_Model1\n\ntree_wf |&gt; \n  finalize_workflow(tree_best_model) |&gt; \n  last_fit(bike_split) |&gt; \n  extract_fit_engine() |&gt; \n  rpart.plot(roundint = FALSE)"
  },
  {
    "objectID": "HW9.html#bagged-tree",
    "href": "HW9.html#bagged-tree",
    "title": "Intro to Modeling (Continued fot HW9)",
    "section": "Bagged tree",
    "text": "Bagged tree\n\nbag_setup &lt;- bag_tree(tree_depth = tune(), min_n = tune(), cost_complexity = tune()) |&gt;\n  set_engine(\"rpart\", importance = \"impurity\") |&gt;\n  set_mode(\"regression\")\n\nbag_wf &lt;- workflow() |&gt; \n  add_recipe(recipe_1) |&gt; \n  add_model(tree_setup)\n\nbag_best_model &lt;- bag_wf |&gt; \n  tune_grid(resamples = bike_cv_folds) |&gt; \n  select_best(metric = \"rmse\")\n\nbag_wf |&gt; \n  finalize_workflow(bag_best_model) |&gt; \n  last_fit(bike_split, metrics = metric_set(rmse, mae)) |&gt; \n  collect_metrics()\n\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard       0.391 Preprocessor1_Model1\n2 mae     standard       0.289 Preprocessor1_Model1\n\nbag_wf |&gt; \n  finalize_workflow(bag_best_model) |&gt; \n  last_fit(bike_split) |&gt; \n  extract_fit_engine() |&gt;\n  vip(geom = \"col\")"
  },
  {
    "objectID": "HW9.html#random-forest",
    "href": "HW9.html#random-forest",
    "title": "Intro to Modeling (Continued fot HW9)",
    "section": "Random forest",
    "text": "Random forest\n\nforest_setup &lt;- rand_forest(mtry = tune()) |&gt;\n  set_engine(\"ranger\", importance = \"impurity\") |&gt;\n  set_mode(\"regression\")\n\nforest_wf &lt;- workflow() |&gt; \n  add_recipe(recipe_1) |&gt; \n  add_model(forest_setup)\n\nforest_best_model &lt;- forest_wf |&gt; \n  tune_grid(resamples = bike_cv_folds) |&gt; \n  select_best(metric = \"rmse\")\n\ni Creating pre-processing data to finalize unknown parameter: mtry\n\n\nWarning: package 'ranger' was built under R version 4.4.2\n\nforest_wf |&gt; \n  finalize_workflow(forest_best_model) |&gt; \n  last_fit(bike_split, metrics = metric_set(rmse, mae)) |&gt; \n  collect_metrics()\n\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard       0.324 Preprocessor1_Model1\n2 mae     standard       0.239 Preprocessor1_Model1\n\nforest_wf |&gt; \n  finalize_workflow(forest_best_model) |&gt; \n  last_fit(bike_split) |&gt; \n  extract_fit_engine() |&gt;\n  vip(geom = \"col\")"
  },
  {
    "objectID": "HW9.html#best-model",
    "href": "HW9.html#best-model",
    "title": "Intro to Modeling (Continued fot HW9)",
    "section": "Best model",
    "text": "Best model\nOur best model with lowest RMSE (using recipe 1) is the random forest. Here is the full fit.\n\nforest_wf |&gt; \n  fit(bike_tbl) |&gt; \n  extract_fit_engine() |&gt;\n  vip(geom = \"col\") \n\nError in num_cols &gt; p: comparison (&gt;) is not possible for language types"
  }
]